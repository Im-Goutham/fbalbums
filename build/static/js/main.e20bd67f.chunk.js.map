{"version":3,"sources":["reducers/user.js","reducers/index.js","store/index.js","actions/user.js","pages/Home.js","NotFound.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","user","albums","combineReducers","state","arguments","length","undefined","action","type","Object","assign","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","storage","createStore","reducers","applyMiddleware","thunk","persistStore","getUserAlbums","dispatch","FB","api","fields","response","console","log","JSON","stringify","Home","responseFacebook","data","_this","getAlbums","props","react_default","a","createElement","Fragment","facebook_login_with_button_default","appId","autoLoad","scope","cssClass","callback","this","Component","connect","NotFound","className","onClick","history","push","ReactRouter","BrowserRouter","Switch","Route","exact","path","component","React","App","es","router","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RACIA,EAAe,CACfC,KAAM,GACNC,OAAQ,ICCGC,cAAgB,CAC3BF,KDCgB,WAAkC,IAAjCG,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQC,EAAOC,MACX,IAAK,YACD,OAAOC,OAAOC,OAAO,GAAGP,EAAM,CAACH,KAAKO,EAAOI,UAC/C,IAAK,mBACD,OAAOF,OAAOC,OAAO,GAAGP,EAAM,CAACF,OAAOM,EAAOI,UACjD,QACI,OAAOR,MENZS,EAAmBC,OAAOC,sCAAwCC,IAS3DC,GALXC,IAKmBC,YACjBC,EACDP,EACEQ,YAAgBC,WAIIC,YAAaN,2CCGzBO,EAAgB,WACzB,OAAO,SAACC,GACRX,OAAOY,GAAGC,IACN,MACA,MACA,CAACC,OAAS,6RACF,SAASC,GA5BK,IAAC3B,EA6BX4B,QAAQC,IAAI,eAAeC,KAAKC,UAAUJ,IAC1CJ,GA9BWvB,EA8Ba2B,EA7BxCC,QAAQC,IAAI,mBAAmB7B,GACxB,CACHO,KAAM,mBACNG,QAAQV,SCHVgC,6MAEJC,iBAAkB,SAACC,GACfN,QAAQC,IAAI,uBAAuBC,KAAKC,UAAUG,IAClDC,EAAKC,eA0CRA,UAAW,WACND,EAAKE,MAAMf,yFAKf,OACKgB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACMH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACKI,MAAM,kBACNC,UAAU,EACVC,MAAM,gDACNnB,OAAO,4BACPoB,SAAS,qBACTC,SAAUC,KAAKf,2BA5DhBgB,aAuFJC,cAdS,SAAChD,GACvB,MAAO,IAMkB,SAACqB,GAC1B,MAAO,CACLD,cAAe,SAACY,GAAD,OAAUX,EAASD,QAKvB4B,CAA6ClB,GC9E7CmB,mLAVJ,IAAAhB,EAAAa,KACP,OACEV,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OAAf,iBAEKd,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAMlB,EAAKE,MAAMiB,QAAQC,KAAK,OAA/C,sBALYN,aCuBRO,mLAjBX,OACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACIpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IAIjCM,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOG,UAAWX,cAVZY,IAAMd,WCqBjBe,0LAfX,OACG1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUlD,MAAOA,GAKVuB,EAAAC,EAAAC,cAAC0B,EAAD,cARIjB,cCCEkB,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e20bd67f.chunk.js","sourcesContent":["// Reducers for error, loading and data fetch\nvar initialState = {\n    user: {},\n    albums: []\n};\n\nexport const user = (state = initialState, action) => {\n   switch (action.type) {\n       case 'SAVE_USER':\n           return Object.assign({},state,{user:action.payload});\n       case 'SAVE_USER_ALBUMS':\n           return Object.assign({},state,{albums:action.payload});\n       default:\n           return state;\n   }\n}\n\n\n","import { combineReducers } from 'redux';\nimport { user } from './user';\n\n// Combine all reducers into root reducer\nexport default combineReducers({\n    user\n});","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web and AsyncStorage for react-native\n\nimport reducers from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\n// const persistedReducer = persistReducer(persistConfig, reducers)\n\nexport const store = createStore(\n    reducers,\n   composeEnhancers(\n     applyMiddleware(thunk)\n   )\n);\n\nexport const persistor = persistStore(store)\n","// // Helper actions for error, loading and data fetch success\n// import * as service from '../api/customer';\n\n\nexport const saveUserAlbums = (albums) => {\n    console.log('user albums are ',albums);\n    return {\n        type: 'SAVE_USER_ALBUMS',\n        payload:albums\n    };\n}\n\nexport const saveUser = (user) => {\n    console.log('user are ',user);\n    return {\n        type: 'SAVE_USER_ALBUMS',\n        payload:user\n    };\n}\n\n\n\n\n\n// Driver action to fetch data\n\nexport const getUserAlbums = () => {\n    return (dispatch) => {\n    window.FB.api(\n        '/me',\n        'GET',\n        {\"fields\":\"id,name,albums{id,description,cover_photo,photos.limit(10){album,backdated_time,backdated_time_granularity,can_backdate,images,link,icon,height,from,event,created_time,can_tag,can_delete,id,name,name_tags,page_story_id,picture,place,target,updated_time,webp_images,width,comments}}\"},\n                function(response) {\n                    console.log('response is ',JSON.stringify(response));\n                    dispatch(saveUserAlbums(response))\n                }\n        ); \n    }\n}   \n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport FacebookLogin from 'react-facebook-login';\nimport { getUserAlbums } from '../actions/user';\n\nclass Home extends Component {\n\n  responseFacebook =(data)=>{\n      console.log('response from fb is ',JSON.stringify(data));\n      this.getAlbums();\n  }\n \n\n  //  componentDidMount() {\n  //       window.fbAsyncInit = function() {\n  //         window.FB.init({\n  //           appId      : '386989675183136',\n  //           cookie     : true,  // enable cookies to allow the server to access\n  //                             // the session\n  //           xfbml      : true,  // parse social plugins on this page\n  //           version    : 'v3.2' // use version 2.1\n  //         });\n      \n  //         // Now that we've initialized the JavaScript SDK, we call\n  //         // FB.getLoginStatus().  This function gets the state of the\n  //         // person visiting this page and can return one of three states to\n  //         // the callback you provide.  They can be:\n  //         //\n  //         // 1. Logged into your app ('connected')\n  //         // 2. Logged into Facebook, but not your app ('not_authorized')\n  //         // 3. Not logged into Facebook and can't tell if they are logged into\n  //         //    your app or not.\n  //         //\n  //         // These three cases are handled in the callback function.\n  //         window.FB.getLoginStatus(function(response) {\n  //           this.statusChangeCallback(response);\n  //         }.bind(this));\n  //       }.bind(this);\n      \n  //       // Load the SDK asynchronously\n  //       (function(d, s, id) {\n  //         var js, fjs = d.getElementsByTagName(s)[0];\n  //         if (d.getElementById(id)) return;\n  //         js = d.createElement(s); js.id = id;\n  //         js.src = \"//connect.facebook.net/en_US/sdk.js\";\n  //         fjs.parentNode.insertBefore(js, fjs);\n  //       }(document, 'script', 'facebook-jssdk'));\n  // }\n  \n\n\n   getAlbums =()=>{\n        this.props.getUserAlbums();\n  \n   }\n\n  render() {\n    return (\n         <React.Fragment>\n               <FacebookLogin\n                    appId=\"386989675183136\"\n                    autoLoad={false}\n                    scope=\"public_profile,email,user_friends,user_photos\"\n                    fields=\"name,email,picture,albums\"\n                    cssClass=\"ui facebook button\"\n                    callback={this.responseFacebook}     \n                  />\n         </React.Fragment>\n    );\n  }\n}\n\n\n\n\n\n\n// Get state data from store to props\nconst mapStateToProps = (state) => {\n  return {\n    \n  };\n}\n\n// Get actions to handle store data\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getUserAlbums: (data) => dispatch(getUserAlbums(data))\n  };\n}\n\n// Wire it all up and export\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n","import React, { Component } from 'react';\n\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        Page not found\n           <button onClick={() => this.props.history.push('/')}>Go to Home</button>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport Home from \"../pages/Home\";\nimport NotFound from '../NotFound';\n// import Header from '../components/Header';\n\nclass ReactRouter extends React.Component {\n  render() {\n    return (\n        <Router>\n            <React.Fragment>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    {/* <Route path='/mediaupload' component={MediaUpload} />\n                    <Route path='/designtool' component={DesignTool} />\n                    <Route path='/plingotool' component={PlingoTool} /> */}\n                    <Route component={NotFound} />\n                </Switch>\n            </React.Fragment>\n        </Router>\n\n    );\n  }\n}\n\nexport default ReactRouter;","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {store, persistor} from './store';\n\nimport Router from './router';\nimport './App.css';\n\n\n// Provider to use redux store in app\n\nclass App extends Component {\n  render() {\n    return (\n       <Provider store={store}>\n        {/*\n                 <PersistGate loading={null} persistor={persistor}>\n        */}\n        \n              <Router />\n          {/*\n               </PersistGate>\n          */} \n       </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}