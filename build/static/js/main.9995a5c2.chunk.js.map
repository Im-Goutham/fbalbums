{"version":3,"sources":["reducers/user.js","reducers/index.js","store/index.js","actions/user.js","pages/Home/index.js","pages/Albums/index.js","pages/Photos/index.js","NotFound.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","user","albums","photos","combineReducers","state","arguments","length","undefined","action","type","Object","assign","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","key","storage","persistedReducer","persistReducer","reducers","store","createStore","applyMiddleware","thunk","persistor","persistStore","saveUser","console","log","getUserAlbums","dispatch","FB","api","fields","_ref","JSON","stringify","saveUserAlbums","data","getUserPhotosByAlbum","id","getState","map","album","saveAlbumPhotos","Home","responseFacebook","accessToken","_this","props","history","push","this","react_default","a","createElement","Redirect","to","Fragment","className","facebook_login_with_button_default","appId","autoLoad","scope","cssClass","callback","Component","withRouter","connect","Albums","logout","fbAsyncInit","init","cookie","xfbml","version","getLoginStatus","response","bind","d","s","js","fjs","getElementsByTagName","getElementById","src","parentNode","insertBefore","document","concat","_this2","_this$props","Header","as","Image","picture","url","name","Button","basic","color","content","floated","onClick","Card","Group","image","header","meta","getPhotos","Photos","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","visible","activeIndex","params","match","_this$state","previewImages","photo","images","source","alt","size","setState","dist_default","onClose","rotatable","scalable","downloadable","drag","zoomable","attribute","NotFound","ReactRouter","BrowserRouter","Switch","Route","exact","path","component","React","App","Container","es","integration_react","loading","router","Boolean","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUACIA,EAAe,CACfC,KAAM,GACNC,OAAQ,GACRC,OAAQ,ICAGC,cAAgB,CAC3BH,KDEgB,WAAkC,IAAjCI,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQC,EAAOC,MACX,IAAK,YACD,OAAOC,OAAOC,OAAO,GAAGP,EAAM,CAACJ,KAAKQ,EAAOI,UAC/C,IAAK,mBACD,OAAOF,OAAOC,OAAO,GAAGP,EAAM,CAACH,OAAOO,EAAOI,UACjD,IAAK,oBACD,OAAOF,OAAOC,OAAO,GAAGP,EAAM,CAACF,OAAOM,EAAOI,UACjD,QACI,OAAOR,METZS,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAgB,CACpBC,IAAK,OACLC,aAGIC,EAAmBC,YAAeJ,EAAeK,GAE1CC,EAAQC,YACnBJ,EACCP,EACEY,YAAgBC,OAIRC,EAAYC,YAAaL,kECXzBM,EAAW,SAAC7B,GAErB,OADA8B,QAAQC,IAAI,YAAY/B,GACjB,CACHS,KAAM,YACNG,QAAQZ,IAeHgC,EAAgB,WACzB,OAAO,SAACC,GACJnB,OAAOoB,GAAGC,IACN,MACA,MACA,CAACC,OAAS,kIACV,SAAAC,GAAmB,IAATpC,EAASoC,EAATpC,OACN6B,QAAQC,IAAI,eAAeO,KAAKC,UAAUtC,IAC1CgC,EAnCc,SAAChC,GAE3B,OADA6B,QAAQC,IAAI,mBAAmB9B,GACxB,CACHQ,KAAM,mBACNG,QAAQX,GA+BSuC,CAAevC,EAAOwC,WAOlCC,EAAuB,SAACC,GACjC,OAAO,SAACV,EAAUW,GAEDA,IAAW5C,KAAKC,OACtB4C,IAAI,SAACC,EAAM5B,GACd,GAAG4B,EAAMH,IAAMA,EAAG,CACdb,QAAQC,IAAI,YAAYe,GADV,IAET5C,EAAU4C,EAAV5C,OACL+B,EAlCe,SAAC/B,GAE5B,OADA4B,QAAQC,IAAI,oBAAoBO,KAAKC,UAAUrC,IACxC,CACHO,KAAM,oBACNG,QAAQV,GA8BS6C,CAAgB7C,EAASA,EAAOuC,KAAO,KAChDX,QAAQC,IAAI,iBAAiB7B,QChDvC8C,qNAEJC,iBAAkB,SAACR,GACfX,QAAQC,IAAI,uBAAuBO,KAAKC,UAAUE,IAC/CA,EAAKS,cACJC,EAAKC,MAAMvB,SAASY,GACpBU,EAAKC,MAAMpB,gBACXmB,EAAKC,MAAMC,QAAQC,KAAK,wFAQ9B,OADaC,KAAKH,MAAbpD,KAEOwD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,eAGpBJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACXN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACKO,MAAM,kBACNC,UAAU,EACVC,MAAM,gDACN9B,OAAO,kCACP+B,SAAS,qBACTC,SAAUb,KAAKN,4BA3BhBoB,cAwDJC,cAAWC,YAfF,SAACnE,GACvB,MAAO,IAMkB,SAAC6B,GAC1B,MAAO,CACHD,cAAe,SAACS,GAAD,OAAUR,EAASD,MAClCH,SAAU,SAACY,GAAD,OAAUR,EAASJ,EAASY,OAKlB8B,CAA6CvB,wCCxDjEwB,6MAoCJC,OAAQ,WACN3C,QAAQC,IAAI,wBACXoB,EAAKC,MAAMvB,SAAS,IACpBf,OAAOoB,GAAGuC,SACVtB,EAAKC,MAAMC,QAAQC,KAAK,yFApCzBxC,OAAO4D,YAAc,WACnB5D,OAAOoB,GAAGyC,KAAK,CACbX,MAAa,kBACbY,QAAa,EAEbC,OAAa,EACbC,QAAa,SAEfhE,OAAOoB,GAAG6C,eAAe,SAASC,GAChCzB,KAAKH,MAAMpB,iBAEXiD,KAAK1B,QACP0B,KAAK1B,MAGN,SAAS2B,EAAGC,EAAGxC,GACd,IAAIyC,EAAIC,EAAMH,EAAEI,qBAAqBH,GAAG,GACpCD,EAAEK,eAAe5C,MACrByC,EAAKF,EAAExB,cAAcyB,IAAOxC,GAAKA,EACjCyC,EAAGI,IAAM,sCACTH,EAAII,WAAWC,aAAaN,EAAIC,IALjC,CAMCM,SAAU,SAAU,oDAOd7C,GACLS,KAAKH,MAAMC,QAAQC,KAAnB,cAAAsC,OAAsC9C,EAAMH,sCAUxC,IAAAkD,EAAAtC,KAAAuC,EACcvC,KAAKH,MAApBpD,EADC8F,EACD9F,KAAKC,EADJ6F,EACI7F,OACV,OAAID,EAIAwD,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACKL,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,GAAG,MACPxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOT,IAAKxF,EAAKkG,QAAQzD,KAAK0D,MADlC,KAC6CnG,EAAKoG,KAC9C5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,OAAOC,QAAQ,UAAUC,QAAQ,QAAQC,QAASnD,KAAKkB,UAE/EjB,EAAAC,EAAAC,cAACiD,EAAA,EAAKC,MAAN,KAEc3G,GAAUA,EAAOK,OAAS,EACtBL,EAAO4C,IAAI,SAACC,EAAM5B,GAAM,IAEfkF,EAAgBtD,EAAhBsD,KAAKF,EAAWpD,EAAXoD,QAEV,OAAU1C,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACEzF,IAAKA,EACL2F,MAAOX,EAAQzD,KAAK0D,IACpBW,OAAQV,EACRW,KAAK,QACLL,QAASb,EAAKmB,UAAU/B,KAAKY,EAAK/C,OAGnD,OAvBdU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,aA9CTS,aAiGJC,cAAWC,YAhBJ,SAACnE,GACrB,MAAO,CACHJ,KAAMI,EAAMJ,KAAKA,KACjBC,OAAQG,EAAMJ,KAAKC,SAKE,SAACgC,GAC1B,MAAO,CACHJ,SAAU,SAACY,GAAD,OAAUR,EAASJ,EAASY,KACtCT,cAAe,SAACS,GAAD,OAAUR,EAASD,QAKduC,CAA6CC,sBChGnEyC,sBAEJ,SAAAA,EAAY7D,GAAM,IAAAD,EAAA,OAAAzC,OAAAwG,EAAA,EAAAxG,CAAA6C,KAAA0D,IACf9D,EAAAzC,OAAAyG,EAAA,EAAAzG,CAAA6C,KAAA7C,OAAA0G,EAAA,EAAA1G,CAAAuG,GAAAI,KAAA9D,KAAMH,KACDhD,MAAQ,CACRkH,SAAS,EACTC,YAAa,GAJHpE,mFAQC,IACKqE,EAAajE,KAAKH,MAA3BqE,MAASD,OACjB1F,QAAQC,IAAI,iBAAiByF,GAC7BjE,KAAKH,MAAMV,qBAAqB8E,EAAO7E,qCAIrC,IAAAkD,EAAAtC,KACDrD,EAAUqD,KAAKH,MAAflD,OADCwH,EAEsBnE,KAAKnD,MAA5BmH,EAFCG,EAEDH,YAAYD,EAFXI,EAEWJ,QACjBxF,QAAQC,IAAI,iBAAiB7B,GAC7B,IAAIyH,EAAgB,GAMrB,OALIzH,EAAOI,OAAS,IAChBqH,EAAgBzH,EAAO2C,IAAI,SAAC+E,EAAM1G,GAC5B,MAAO,CAACsE,IAAKoC,EAAMC,OAAO,GAAGC,OAAQC,IAAKH,EAAM1B,YAIrD1C,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACEL,EAAAC,EAAAC,cAACuC,EAAA,EAAMW,MAAP,CAAaoB,KAAK,SAET9H,GAAUA,EAAOI,OAAO,EACpBJ,EAAO2C,IAAI,SAAC+E,EAAM1G,GAAM,IAChBgF,EAAW0B,EAAX1B,QACL,OAAQ1C,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOT,IAAKU,EAASQ,QAAS,WAAQb,EAAKoC,SAAS,CAAEX,SAAUA,EAAQC,YAAcrG,SAEjG,MAGbsC,EAAAC,EAAAC,cAACwE,EAAAzE,EAAD,CACK6D,QAASA,EACTa,QAAS,WAAQtC,EAAKoC,SAAS,CAAEX,SAAS,KAC1CO,OAAQF,EACRJ,YAAaA,EACba,WAAW,EACXC,UAAU,EACVC,cAAc,EACdC,MAAM,EACNC,UAAU,EACVC,WAAW,YAjDNpE,cA4EJE,cAdO,SAACnE,GACrB,MAAO,CACHF,OAAQE,EAAMJ,KAAKE,SAKE,SAAC+B,GAC1B,MAAO,CACHS,qBAAsB,SAACD,GAAD,OAAUR,EAASS,EAAqBD,OAKrD8B,CAA6C0C,GCtE/CyB,mLAVJ,IAAAvF,EAAAI,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OAAf,iBAEKN,EAAAC,EAAAC,cAAA,UAAQgD,QAAS,kBAAMvD,EAAKC,MAAMC,QAAQC,KAAK,OAA/C,sBALYe,aC0BRsE,mLAlBX,OACInF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,KACIpF,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACIL,EAAAC,EAAAC,cAACmF,EAAA,EAAD,KACIrF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjG,IACjCQ,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWzE,EAAQuE,OAAO,IACnDvF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOE,KAAK,iBAAiBC,UAAWhC,EAAQ8B,OAAO,IAGvDvF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOG,UAAWP,cAXZQ,IAAM7E,WCwBjB8E,2LAfX,OACE3F,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACEL,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,KACI5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAU9H,MAAOA,GACbiC,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAaC,QAAS,KAAM5H,UAAWA,GACrC6B,EAAAC,EAAAC,cAAC8F,EAAD,iBATAnF,cCFEoF,QACW,cAA7B3I,OAAO4I,SAASC,UAEe,UAA7B7I,OAAO4I,SAASC,UAEhB7I,OAAO4I,SAASC,SAASlC,MACvB,2DCbNmC,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASnE,SAASJ,eAAe,SD4H3C,kBAAmBwE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9995a5c2.chunk.js","sourcesContent":["// Reducers for error, loading and data fetch\nvar initialState = {\n    user: {},\n    albums: [],\n    photos: []\n};\n\nexport const user = (state = initialState, action) => {\n   switch (action.type) {\n       case 'SAVE_USER':\n           return Object.assign({},state,{user:action.payload});\n       case 'SAVE_USER_ALBUMS':\n           return Object.assign({},state,{albums:action.payload});\n       case 'SAVE_ALBUM_PHOTOS':\n           return Object.assign({},state,{photos:action.payload});   \n       default:\n           return state;\n   }\n}\n\n\n","import { combineReducers } from 'redux';\nimport { user } from './user';\n\n// Combine all reducers into root reducer\nexport default combineReducers({\n    user\n});","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web and AsyncStorage for react-native\n\nimport reducers from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport const store = createStore(\n  persistedReducer,\n   composeEnhancers(\n     applyMiddleware(thunk)\n   )\n);\n\nexport const persistor = persistStore(store)\n","// // Helper actions for error, loading and data fetch success\n// import * as service from '../api/customer';\n\n\nexport const saveUserAlbums = (albums) => {\n    console.log('user albums are ',albums);\n    return {\n        type: 'SAVE_USER_ALBUMS',\n        payload:albums\n    };\n}\n\nexport const saveUser = (user) => {\n    console.log('user are ',user);\n    return {\n        type: 'SAVE_USER',\n        payload:user\n    };\n}\n\nexport const saveAlbumPhotos = (photos) => {\n    console.log('album photos are ',JSON.stringify(photos));\n    return {\n        type: 'SAVE_ALBUM_PHOTOS',\n        payload:photos\n    };\n}\n\n\n// Driver action to fetch data\n\nexport const getUserAlbums = () => {\n    return (dispatch) => {\n        window.FB.api(\n            '/me',\n            'GET',\n            {\"fields\":\"id,name,albums{id,name,description,cover_photo,picture{url,height,cache_key,is_silhouette,width},photos{album,images,picture}}\"},\n            function({albums}) {\n                console.log('response is ',JSON.stringify(albums));\n                dispatch(saveUserAlbums(albums.data))\n            }\n          );\n    }\n}   \n\n\nexport const getUserPhotosByAlbum = (id) => {\n    return (dispatch, getState) => {\n       // console.log('get state is ..  ',getState().user.albums)\n        var albums = getState().user.albums;\n        albums.map((album,key)=>{\n            if(album.id == id){\n                console.log('album is ',album);\n                let {photos} = album;\n                dispatch(saveAlbumPhotos(photos ? photos.data : []));\n                console.log('photos is ..  ',photos) \n            }\n            \n        })\n    }\n}\n\n","import React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport FacebookLogin from 'react-facebook-login';\nimport { saveUser, getUserAlbums } from '../../actions/user';\nimport './index.css';\n\nclass Home extends Component {\n\n  responseFacebook =(data)=>{\n      console.log('response from fb is ',JSON.stringify(data));\n      if(data.accessToken){\n          this.props.saveUser(data);\n          this.props.getUserAlbums();\n          this.props.history.push('/me/albums')\n      }\n    \n  }\n \n\n  render() {\n    let {user} = this.props;\n    if(user){\n        return  <Redirect to=\"/me/albums\"/>\n    }\n    return (\n         <React.Fragment>\n           <div className=\"login\">\n               <FacebookLogin\n                    appId=\"386989675183136\"\n                    autoLoad={true}\n                    scope=\"public_profile,email,user_friends,user_photos\"\n                    fields=\"name,email,picture.height(2048)\"\n                    cssClass=\"ui facebook button\"\n                    callback={this.responseFacebook}     \n                  />\n          </div>     \n         </React.Fragment>\n    );\n  }\n}\n\n\n\n\n\n\n// Get state data from store to props\nconst mapStateToProps = (state) => {\n  return {\n    \n  };\n}\n\n// Get actions to handle store data\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      getUserAlbums: (data) => dispatch(getUserAlbums(data)),\n      saveUser: (data) => dispatch(saveUser(data)),\n  };\n}\n\n// Wire it all up and export\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));\n\n","import React, { Component } from 'react';\nimport {Redirect, withRouter} from 'react-router-dom';\nimport { Button,Header, Card, Image ,Icon} from 'semantic-ui-react'\nimport { connect } from 'react-redux';\nimport { saveUser, getUserAlbums } from '../../actions/user';\n\n\nclass Albums extends Component {\n\n\n  componentDidMount() {\n    window.fbAsyncInit = function() {\n      window.FB.init({\n        appId      : '386989675183136',\n        cookie     : true,  // enable cookies to allow the server to access\n                          // the session\n        xfbml      : true,  // parse social plugins on this page\n        version    : 'v2.1' // use version 2.1\n      });\n      window.FB.getLoginStatus(function(response) {\n        this.props.getUserAlbums();\n       // this.statusChangeCallback(response);\n      }.bind(this));\n    }.bind(this);\n  \n    // Load the SDK asynchronously\n    (function(d, s, id) {\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s); js.id = id;\n      js.src = \"//connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n  }\n\n  // componentDidMount(){\n   \n  // }  \n\n  getPhotos(album){\n       this.props.history.push(`/me/albums/${album.id}`)\n  }\n\n  logout= ()=>{\n    console.log('function called ... ')\n     this.props.saveUser({});\n     window.FB.logout();\n     this.props.history.push('/')\n  }\n\n  render() {\n     let {user,albums} = this.props;\n     if(!user){\n         return  <Redirect to=\"/\"/>\n     }\n    return (\n         <React.Fragment>\n              <Header as='h2'>\n                  <Image src={user.picture.data.url}  />  {user.name}\n                  <Button basic color='blue' content='Log out' floated='right' onClick={this.logout}/>\n              </Header>\n              <Card.Group>\n                    {\n                            albums && albums.length > 0  ? (\n                                albums.map((album,key)=>{\n                                //    console.log('album is ',JSON.stringify(album));\n                                    let {name,picture} = album;\n                              //      console.log('picture is ',picture);\n                                    return    <Card\n                                                key={key}\n                                                image={picture.data.url}\n                                                header={name}\n                                                meta='Album'\n                                                onClick={this.getPhotos.bind(this,album)}\n                                                />\n                                })\n                            ) :null\n                    }\n                 </Card.Group>\n         </React.Fragment>\n    );\n  }\n}\n\n\n\n\n// Get state data from store to props\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.user,\n        albums: state.user.albums\n    };\n  }\n  \n  // Get actions to handle store data\n  const mapDispatchToProps = (dispatch) => {\n    return {\n        saveUser: (data) => dispatch(saveUser(data)),\n        getUserAlbums: (data) => dispatch(getUserAlbums(data))\n    };\n  }\n  \n  // Wire it all up and export\n  export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Albums));\n  \n\n","import React, { Component } from 'react';\nimport { Button, Card, Image } from 'semantic-ui-react'\nimport Viewer from 'react-viewer';\nimport 'react-viewer/dist/index.css';\nimport { connect } from 'react-redux';\nimport { getUserPhotosByAlbum } from '../../actions/user';\n\n\nclass Photos extends Component {\n\n  constructor(props){\n     super(props);\n     this.state = {\n          visible: false,\n          activeIndex: 0\n     }\n  }\n\n  componentDidMount(){\n         const { match: { params } } = this.props;\n         console.log('params are .. ',params);\n         this.props.getUserPhotosByAlbum(params.id);\n  }  \n\n\n  render() {\n     let {photos} = this.props;\n     let {activeIndex,visible} = this.state;\n     console.log('photos are .. ',photos);\n     let previewImages = [];\n     if(photos.length > 0){\n        previewImages = photos.map((photo,key)=>{\n              return {src: photo.images[0].source, alt: photo.picture}\n        })\n     }\n    return (\n         <React.Fragment>\n           <Image.Group size='small'>\n                {\n                    photos && photos.length>0 ? (\n                        photos.map((photo,key)=>{\n                           let {picture} = photo;\n                           return  <Image src={picture} onClick={() => { this.setState({ visible: !visible,activeIndex : key}); } }/>\n                        })\n                    ) : null\n                }\n           </Image.Group>  \n           <Viewer\n                visible={visible}\n                onClose={() => { this.setState({ visible: false }); } }\n                images={previewImages}\n                activeIndex={activeIndex}\n                rotatable={false}\n                scalable={false}\n                downloadable={false}\n                drag={false}\n                zoomable={false}\n                attribute={false}\n                />\n         </React.Fragment>\n    );\n  }\n}\n\n\n\n\n\n\n// Get state data from store to props\nconst mapStateToProps = (state) => {\n    return {\n        photos: state.user.photos\n    };\n  }\n  \n  // Get actions to handle store data\n  const mapDispatchToProps = (dispatch) => {\n    return {\n        getUserPhotosByAlbum: (data) => dispatch(getUserPhotosByAlbum(data))\n    };\n  }\n  \n  // Wire it all up and export\n  export default connect(mapStateToProps, mapDispatchToProps)(Photos);\n  \n\n","import React, { Component } from 'react';\n\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        Page not found\n           <button onClick={() => this.props.history.push('/')}>Go to Home</button>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport Home from \"../pages/Home\";\nimport Albums from \"../pages/Albums\";\nimport Photos from \"../pages/Photos\";\nimport NotFound from '../NotFound';\n// import Header from '../components/Header';\n\nclass ReactRouter extends React.Component {\n  render() {\n    return (\n        <Router>\n            <React.Fragment>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/me/albums' component={Albums} exact={true}/>\n                    <Route path='/me/albums/:id' component={Photos} exact={true} />\n                    {/* <Route path='/designtool' component={DesignTool} />\n                    <Route path='/plingotool' component={PlingoTool} /> */}\n                    <Route component={NotFound} />\n                </Switch>\n            </React.Fragment>\n        </Router>\n\n    );\n  }\n}\n\nexport default ReactRouter;","import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react'\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {store, persistor} from './store';\n\n\nimport Router from './router';\nimport './App.css';\n\n\n\n// Provider to use redux store in app\n\nclass App extends Component {\n\n  \n  render() {\n    return (\n      <React.Fragment>\n        <Container >  \n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                  <Router />\n                </PersistGate>\n            </Provider>\n       </Container>  \n      </React.Fragment>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}